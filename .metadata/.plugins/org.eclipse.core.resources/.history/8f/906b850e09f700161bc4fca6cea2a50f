package gui.controller;

import java.io.File;

import fileHandler.GridFileManager;
import gui.model.Grid;
import heuristics.*;
import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.TextField;
import javafx.stage.FileChooser;
import javafx.stage.Stage;

public class GridOptionsController {

	@FXML
	private Button importMap, exportMap, findPath, findPath2, findPath3, findPath4, findPath5, findPath6,changeStart, changeEnd;
	@FXML
	private TextField row, column, weight, weight1, weight2;
	@FXML
	private ComboBox<String> chosenHeuristic;
	
	private GridController gridCtrl;
	private FileChooser fileChoose = new FileChooser();
	private Stage stage;
	private String[] heuristics = {"Distance", "BadDistance", "Chebyshev", "Manhattan", "HardCellsAvoidance"};
	private Heuristic heuristic;
	
	@FXML
	public void initialize() {
		
		//opens a file browser in the directory that can choose to import whichever file the user wants. Will crash if bad file is given.
		importMap.setOnMouseClicked(e -> {
			fileChoose.setInitialDirectory(new File("./"));
			File file = fileChoose.showOpenDialog(stage);
			if(file != null) {
				Grid grid = GridFileManager.importFile(file.getAbsolutePath(), gridCtrl.ROWS, gridCtrl.COLS);
				gridCtrl.changeGrid(grid);
			}
		});
		
		
		//opens a file browser for the user to save the current map to. DOES NOT SAVE ANYTHING TO DO WITH SEARCHES
		exportMap.setOnMouseClicked(e -> {
			Grid grid = gridCtrl.getGrid();
			fileChoose.setInitialDirectory(new File("./"));
			File file = fileChoose.showSaveDialog(stage);
			if(file != null) {
				GridFileManager.exportFile(grid, file);
			}
		});
		
		//runs AStar search
		findPath.setOnMouseClicked(e -> {
			try {
				gridCtrl.runAStar(heuristic);
			} catch(Exception ex) {
				Alert alert = new Alert(AlertType.INFORMATION);
				alert.setTitle("Error");
				alert.setHeaderText("No heuristic");
				alert.setContentText("You did not select the heuristic to be used");
				alert.showAndWait();
			}	
		});
		
		//runs UCS
		findPath2.setOnMouseClicked(e -> {
			gridCtrl.runUCS();
			
		});
		
		findPath4.setOnMouseClicked(e -> {
			try {
				gridCtrl.runAll(heuristic);
			} catch(Exception ex) {
				Alert alert = new Alert(AlertType.INFORMATION);
				alert.setTitle("Error");
				alert.setHeaderText("No heuristic");
				alert.setContentText("You did not select the heuristic to be used");
				alert.showAndWait();
			}
		});
		
		//runs Weighted A  Star Search
		findPath5.setOnMouseClicked(e -> {
			try {
				float w1 = Float.parseFloat(weight1.getText());
				float w2 = Float.parseFloat(weight2.getText());
				Heuristic[] hArray = new Heuristic[5];
				hArray[0] = new DistanceHeuristic(gridCtrl.getGrid());
				hArray[1] = new BadDistanceHeuristic(gridCtrl.getGrid());
				hArray[2] = new ChebyshevHeuristic(gridCtrl.getGrid());
				hArray[3] = new ManhattanDistanceHeuristic(gridCtrl.getGrid());
				hArray[4] = new HardCellsAvoidanceHeuristic(gridCtrl.getGrid());
				gridCtrl.runSAStar(hArray, w1, w2);
			} catch(Exception ex) {
				Alert alert = new Alert(AlertType.INFORMATION);
				alert.setTitle("Error");
				alert.setHeaderText("No weight(s)");
				alert.setContentText("You did not give one or two of the required weights");
				alert.showAndWait();
			}
		});
		
		//runs weighted A* search
		findPath3.setOnMouseClicked(e -> {
			try {
				float w1 = Float.parseFloat(weight1.getText());
				gridCtrl.runWAStar(w, heuristic);
			} catch(Exception ex) {
				Alert alert = new Alert(AlertType.INFORMATION);
				alert.setTitle("Error");
				alert.setHeaderText("No weight or heuristic");
				alert.setContentText("You did not give the weight or select the heuristic to be used");
				alert.showAndWait();
			}
		});
		
		//tries to change the location of the start. DOES NOT CHECK IF NEW START IS WITHIN 100 OF END.
		changeStart.setOnMouseClicked(e -> {
			try {
				int[] newStart = {0, 0};
				newStart[0] = Integer.parseInt(row.getText());
				newStart[1] = Integer.parseInt(column.getText());
				Grid grid = gridCtrl.getGrid();
				//tries to change the start of the current map. If invalid location such as a blocked one is given has a pop up telling user they gave bad start
				boolean changed = grid.changeStart(newStart);
				if (changed) {
					gridCtrl.colorGrid();
				} else {
					Alert alert = new Alert(AlertType.INFORMATION);
					alert.setTitle("Error");
					alert.setHeaderText("Invalid numbers");
					alert.setContentText("You gave invalid coordinates for the new start. It is either out of bounds or blocked");
					alert.showAndWait();
				}
			} catch(Exception ex) {
				Alert alert = new Alert(AlertType.INFORMATION);
				alert.setTitle("Error");
				alert.setHeaderText("Not numbers");
				alert.setContentText("You did not give numbers for the new start");
				alert.showAndWait();
			}
			
		});
		
		//tries to change the location of the end. DOES NOT CHECK IF NEW END IS WITHIN 100 OF START.
		changeEnd.setOnMouseClicked(e -> {
			try {
				int[] endStart = {0, 0};
				endStart[0] = Integer.parseInt(row.getText());
				endStart[1] = Integer.parseInt(column.getText());
				Grid grid = gridCtrl.getGrid();
				//tries to change the end of the current map. If invalid location such as a blocked one is given has a pop up telling user they gave bad end
				boolean changed = grid.changeEnd(endStart);
				if (changed) {
					gridCtrl.colorGrid();
				} else {
					Alert alert = new Alert(AlertType.INFORMATION);
					alert.setTitle("Error");
					alert.setHeaderText("Invalid numbers");
					alert.setContentText("You gave invalid coordinates for the new end. It is either out of bounds or blocked");
					alert.showAndWait();
				}
			} catch(Exception ex) {
				Alert alert = new Alert(AlertType.INFORMATION);
				alert.setTitle("Error");
				alert.setHeaderText("Not numbers");
				alert.setContentText("You did not give numbers for the new end");
				alert.showAndWait();
			}
			
		});
		
		chosenHeuristic.setOnAction( e -> {
			String thisH = chosenHeuristic.getSelectionModel().getSelectedItem();
			if(thisH.equals(heuristics[0])) {
				heuristic = new DistanceHeuristic(gridCtrl.getGrid());
				System.out.println("Using modified Euclidean Distance");
			}
			if(thisH.equals(heuristics[1])) {
				heuristic = new BadDistanceHeuristic(gridCtrl.getGrid());
				System.out.println("Using unmodified Euclidean Distance");
			}
			if(thisH.equals(heuristics[2])) {
				heuristic = new ChebyshevHeuristic(gridCtrl.getGrid());
				System.out.println("Using Chebyshev Distance");
			}
			if(thisH.equals(heuristics[3])) {
				heuristic = new ManhattanDistanceHeuristic(gridCtrl.getGrid());
				System.out.println("using Manhattan Distance");
			}
			if(thisH.equals(heuristics[4])) {
				heuristic = new HardCellsAvoidanceHeuristic(gridCtrl.getGrid());
				System.out.println("using Avoid Hard Cells");
			}
		});
	}
	
	public void setGridController(GridController gc) {
		this.gridCtrl = gc;
		chosenHeuristic.getItems().addAll(heuristics);
	}
	
	public void setStage(Stage s) {
		this.stage = s;
	}
}
